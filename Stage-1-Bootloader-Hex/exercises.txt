1) When we made bootable.bin, we input some bytes to the beginning of the
file. What are these bytes, what do they represent, and why are they there?

2) What is the equivalent of bootable.bin in x86 ASM? Using the NASM notation,
how do you fill out the bytes for the boot sector? How do you write the 
"magic" number.

After theorizing for a while, try to create the ASM. Assemble the program, and
inspect it with GHex. Observe the results, and objectively check if they make
sense. 

3) We have been running the code thus far on an emulator. What is an emulator?
What is different between an emulator and a virtual machine (and real hardware
for that matter)? Why do we eventually need to test on all mediums?

4) For the ambitious. After observing the assembly code, explore the x86
instruction set a bit. See if you can get anything displayed to the screen.
(Hint: This requires calling BIOS Interrupt 00h with AL loaded to set the 
video display mode, 02h with BH, DH, and DL (DH/DL importantly) loaded
to set the cursor position, 09h with AL, BH, BL, and CX loaded to print a 
character (CX number of times). 
	- Extra Hints:
		- 1st Call:
			- AL: loaded with correct VGA video mode (lookup)
		- 2nd Call:
			- BH: loaded with the page number to display on
			- DH: Row number to display the cursor
			- DL: Column number to display the cursor
		- 3rd Call:
			- AL: Character to draw (usuall a routine loads the
			      character from where ever it is stored into
			      this register.
			- BH: Page number to display on
			- BL: Color, decomposed into 4 bits fore/background
			- CX: Number of times to print that character
