Phase 1:
=========
1. Writing Hexidecimal 
2. The Magic Boot Number
3. Writing a valid bootloader in Hex
4. Experiment writing valid bootloader in ASM (traslate Hex -> ASM)
5. Ambitious: Look at printing data

Phase 2:
=========
1. Introduction to the ASM bootloader, inspect HEX
2. Data vs. Code in Binary files..
3. Defining data in ASM
4. Introduction to Interrupts & BIOS calls
5. Stack

Phase 3:
========
1. What does the 1st stage bootloader need to do?
2. Understanding Memory addressing and limitations.
3. Defining a memory map for the inital bootloader and Kernel
4. Using BIOS to read data from a disk to disk buffer
5. Reading that new sector

Phase 4:
========
1. Get stage02 loaded from the disk and successfully jump to it
2. After we get there, detect low memory that is available
3. Then multiple calls to e820 for high memory. 
4. ....
5. THIS PHASE STILL HAS A LOT OF WORK TO BE DONE IF I WANT 
   TO DO IT CORRECTLY...

Phase 5:
========
1. Writing to a file in Bochs/Qemu. 
2. Setting up the serial ports.
3. Writing bytes to the serial port in a single call.
4. Constructing a serial_print_string method. 
5. Enabling the A20 line to prepare for PMode.
6. F800:7FFF = 0xFFFFF -> Highest memory achievable without A20 
   line, where F800:8000 = 0x100000. 
   
   Log2(AddressLines) = Max. Addressable Space
   Log2(20) = 1048576 = 0x100000

Phase 6:
========
1. Taking a step back. Difference between HDD and FDisk.
2. Reading a sector from a HDD.
3. CHS and LBA
4. Combining all of this to the new Stage01 loader (will load
   both HDD and Fdisk, choosing correctly and storing drive).

Phase 7:
========
1. Using the Stack to call functions in ASM.
2. Difference between register and stack calling.
3. Refactoring bootsector (1 and 2) to use stack. 
4. Setting up the GDT for PMode.

<IN BETWEEN>
Work on relocating code using REP and MOVSD/SB/SW
so that we can move the kernel code to the higher half
after it is loaded into the disk buffer by BIOS
</IN BETWEEN>

Phase 8:
========
1. Loading the Kernel from disk to memory (stage02).
2. Setting up PMode for the kernel.
3. Jump to kernel.    

;===========================================================================;
;	Note for FINAL VERSION of BOOTLOADER:									;
;	It's common for the loader to keep interrupts 							;
;	disabled (the kernel will enable them later when an IDT is properly 	;
;	set up).																;
;																			;
;	Take time to think about whether or not you'll enable paging here. 		;
;	Keep in mind that debugging paging initialization code without the help ;
;	of exception handlers may quickly become a nightmare!					;
;===========================================================================;
	
Once in Kernel Mode:
====================
1. Establish a memory environment and create memory map.
2. IDT && GDT
3. IRQ's:
	a. one should refrain from having interrupts of different types coming 
	in on the same vector. Common practice is to leave the first 32 vectors 
	for exceptions, as mandated by Intel.
4. Implement a Kernel Mode file system.
5. Start working on device drivers, specifically:
	a. ISA
	b. ATA
	c. ACPI
	d. PCI
	e. IDE
	f. SCSI
6. One day, add Network Stack support and try adding NE2000 support

NOTE:
"Ok, here is the situation: until now, I developed a kernel that supports protected mode, 
using a gdt with 5 entries (null, kernel code, kernel data, user code, user data), all spanning the 
full memory range. The IDT has been implemented, the pic and pit have been initialized. A made 
my own version of the buddy system for physical page management (yes, I use paging and this works, 
that is, my kernel doesn't crash on page allocation and page mapping). Kernel memory (kernel heap) 
is being managed using a variation on Dougs Lea allocator."

;===============================================;
; 		TEST ON THE FOLLOWING PLATFORMS			;
;===============================================;
1) Qemu
2) Bochs
3) Hyper-V
4) VirtualBox
5) Real Hardware?

;===============================================;
;			"NICE TO HAVE" FEATURES				;
;===============================================;
SMP Support:
http://wiki.osdev.org/APIC
http://wiki.osdev.org/Detecting_CPU_Speed#RDTSC_Instruction_Access

http://bochs.sourceforge.net/doc/docbook/user/smp.html
http://bochs.sourceforge.net/doc/docbook/user/bochsrc.html (Look @ CPU Section)

Networking:
http://bochs.sourceforge.net/doc/docbook/user/bochsrc.html (Look @ NE2k)